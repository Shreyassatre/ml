# -*- coding: utf-8 -*-
"""ML_EXP-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZmQaW6UvBocXtPXPx-PSZ6t-pBziDuz
"""

from sklearn.datasets import load_breast_cancer
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

cancer = load_breast_cancer()

df2 = pd.Series(cancer['target'])

df2

df = pd.DataFrame(cancer['data'], columns = cancer['feature_names'])

df = df.merge(df2.rename('result'), left_index=True, right_index=True)

df.head()

df.isnull().sum()

df.info()

X = df.drop(['result'], axis=1)
y = df['result']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_scaled.shape

# Perform PCA with 5 components
pca = PCA(n_components=5)
X_pca = pca.fit_transform(X_scaled)

X_pca.shape

# Create a scatter plot
plt.figure(figsize =(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c = df['result'], cmap ='plasma')
plt.xlabel('First Principal Component')
plt.ylabel('Second Principal Component')

# components
pca.components_

df_comp = pd.DataFrame(pca.components_, columns = cancer['feature_names'])
plt.figure(figsize =(14, 6))
sns.heatmap(df_comp)

"""# Before PCA"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.33, random_state=42)

X_train.shape

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score, accuracy_score

# Calculate the mean squared error and R-squared value
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)
accuracy = lr.score(X_test, y_test)

# Print the results
print("Mean squared error: {:.2f}".format(mse))
print("Root mean squared error: {:.2f}".format(rmse))
print("R-squared value: {:.2f}".format(r2))
print("Accuracy is: {:.2f}".format(accuracy))

"""# After PCA"""

X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_pca, y, test_size=0.33, random_state=42)

X_train_2.shape

lr.fit(X_train_2, y_train_2)

y_pred_2 = lr.predict(X_test_2)

mse = mean_squared_error(y_test_2, y_pred_2)
rmse = mean_squared_error(y_test_2, y_pred_2, squared=False)
r2 = r2_score(y_test_2, y_pred_2)
accuracy = lr.score(X_test_2, y_test_2)

print("Mean squared error: {:.2f}".format(mse))
print("Root mean squared error: {:.2f}".format(rmse))
print("R-squared value: {:.2f}".format(r2))
print("Accuracy is: {:.2f}".format(accuracy))